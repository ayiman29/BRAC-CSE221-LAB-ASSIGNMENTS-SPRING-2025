There is an undirected weighted graph with N nodes and M edges. The nodes are
numbered from 1 to N. There is no self loop or multi edge. The total cost of a
path is the sum of the weights of the edges in that path. 
You need to find the minimum cost to reach node D from node S such that the
path contains the node K.  If there is no such path, return -1.
The path may contain some edges multiple times.
Solve the problem in O((N+M)*log(N+M)) time.

Constraints:
1 <= N <= 10000
1 <= M <= min(10000, (n*(n-1))/2)
1 <= S, D, K <= N
1 <= edge weights <= 1000

Example-1:
N = 7
M = 10
S = 3
D = 7
K = 5
edges = [(2,3,1), (2,4,1), (4,3,6), (4,1,2), (1,7,2), (4,5,3), (5,7,8), (4,7,1), (5,6,4), (6,7,2)]
solve(N, M, S, D, K, edges) returns 9

Example-2:
N = 5
M = 4
S = 1
D = 4
K = 2
edges = [(1,5,6), (1,4,7), (5,4,2), (2,3,4)]
solve(N, M, S, D, K, edges) returns -1

Time limit: 1s per batch.

Scoring:
Batch   Score   Tests   max(N)
1       0.1     1       3           
2       0.1     50      10
3       0.1     100     50
4       0.1     100     100
5       0.1     50      500
6       0.1     20      1000
7       0.1     50      5000
8       0.1     50      10000
9       0.1     20      10000
10      0.1     50      10000
-------------------------------
10       1       Total