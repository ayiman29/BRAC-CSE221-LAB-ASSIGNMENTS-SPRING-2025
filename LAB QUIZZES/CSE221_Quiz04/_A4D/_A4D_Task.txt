You are given an undirected unweighted connected graph with N nodes and M edges. There can be self loop or multiple edges. 
Your task is to determine whether an Eulerian Path exists in the graph.

In graph theory, an Eulerian path (also called an Eulerian trail or Eulerian walk) is a path in a graph that visits every edge exactly once and may start and end at different vertices. 
However, a vertex can be visited multiple times.

Input
The input graph will be given as edge list

Output 
return True or False depending on whether the graph has an Eulerian Path or not respectively.

Solve this task in O(N + M)

1 <= N <= 10^5
0 <= M <= 2 * 10^5

Example-1:
N = 5
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (2, 3), (2, 4), (3, 4)]
solve(N, edges) returns True

Example-2:
N = 5
edges = [(0, 1), (0, 2), (0, 3), (2, 3), (2, 4), (3, 4)]
solve(N, edges) returns False


Example-3:
N = 8
edges = [(0, 2), (0, 4), (1, 0), (1, 4), (1, 6), (1, 5), (2, 4), (2, 5), (3, 2), (4, 3), (4, 7), (5, 3), (6, 4), (6, 2), (6, 5), (7, 0)]
solve(N, edges) returns True

Time limit: 1s per batch.

Scoring:
Batch   Score   Tests   max(N)
1       0.06    1       5           (Example - 1)
2       0.07    1       5           (Example - 2)
3       0.07    1       8           (Example - 3)
4       0.08    10000   10        
5       0.08    10000   10
6       0.08    1000    100
7       0.08    1000    100
8       0.08    100     1000
9       0.08    100     1000
10      0.08    50      10000
11      0.08    50      10000
12      0.08    20      100000
13      0.08    20      100000
-------------------------------
14      1       Total
